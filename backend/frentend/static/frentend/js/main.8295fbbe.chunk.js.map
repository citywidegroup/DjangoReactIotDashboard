{"version":3,"sources":["components/nav/Nav.js","components/table/Table.js","components/chart/CustomChart.js","components/post/Post.js","components/ws.js","components/http.js","App.js","serviceWorker.js","index.js"],"names":["CustomNav","Navbar","expand","variant","bg","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","to","columns","name","selector","sortable","center","CustomTable","props","title","theme","data","pagination","paginationPerPage","paginationRowsPerPageOptions","CustomChart","useState","values","x","y","setdataState","useEffect","length","localdata","timestamp","Date","rdata","getHours","getMinutes","width","height","margin","top","bottom","left","right","CustomPost","log","setlogState","locallog","Form","Group","controlId","Row","Label","column","sm","Col","Control","type","value","JSON","stringify","Alert","md","span","offset","Button","onClick","sendhandleClick","genertorhandleClick","chatSocket","WebSocket","window","location","host","Ws","onmessage","e","parse","onclose","send","Math","random","now","Container","setInterval","url","CustomHttp","longlooping","axios","get","then","response","catch","error","console","post","App","Jumbotron","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8295fbbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction CustomNav() {\r\n  return (\r\n    <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\r\n      <Navbar.Brand href=\"#\">IOT</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link><Link to=\"/\" className=\"nav-link\">Http</Link></Nav.Link>\r\n          <Nav.Link><Link to=\"/ws\" className=\"nav-link\">WebSocket</Link></Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default CustomNav;\r\n","import React from 'react';\r\nimport DataTable from 'react-data-table-component';\r\n\r\n// const chatSocket = new WebSocket('ws://127.0.0.1:8000/ws/streaming/room_name/');\r\n\r\nconst columns = [\r\n  {\r\n    name: 'Reading',\r\n    selector: 'reading',\r\n    sortable: true,\r\n    center: true\r\n  },\r\n  {\r\n    name: 'TimeStamp',\r\n    selector: 'timestamp',\r\n    sortable: true,\r\n    center: true\r\n  },\r\n  {\r\n    name: 'SensorType',\r\n    selector: 'sensorType',\r\n    sortable: true,\r\n    center: true\r\n  },\r\n];\r\n\r\nfunction CustomTable(props) {\r\n\r\n  return (\r\n    <div>\r\n      <DataTable\r\n        title=\"Dashboard\"\r\n        columns={columns}\r\n        theme=\"solarized\"\r\n        data={props.data}\r\n        pagination={true}\r\n        paginationPerPage = {5}\r\n        paginationRowsPerPageOptions={[5, 10, 15, 20, 25, 30]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomTable;\r\n","import React, { useState, useEffect} from 'react';\r\nimport { LineChart } from 'react-d3-components-2'\r\n\r\nfunction CustomChart(props) {\r\n  const [data, setdataState] = useState(\r\n    [{\r\n      values: [{x: 0, y: 0}]\r\n    }]\r\n  )\r\n\r\n  useEffect(() => { \r\n\r\n  },[]);\r\n  \r\n  // Hook on prop \r\n  useEffect(() => { \r\n    if(props.data.length != 0){\r\n      const localdata = [...data];\r\n      const timestamp = new Date(props.data[0]['timestamp'] * 1000);\r\n      const rdata = {\r\n        x: (timestamp.getHours() * 60) + timestamp.getMinutes(),\r\n        y: props.data[0]['reading'],\r\n      }\r\n      localdata[0].values = [...localdata[0].values,rdata]\r\n      setdataState(localdata);\r\n    }   \r\n  }, [props.data]);\r\n\r\n  return ( \r\n    <div>\r\n      <LineChart\r\n        data={data}\r\n        width={600}\r\n        height={430}\r\n        margin={{top: 10, bottom: 50, left: 50, right: 10}}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Row, Col, Alert, Button } from 'react-bootstrap';\r\n\r\nfunction CustomPost( props ) {\r\n  const [data, setdataState] = useState({});\r\n  const [log, setlogState] = useState();\r\n\r\n  // Hook on prop \r\n  useEffect(() => { \r\n    if(props.data.length !== 0){\r\n      const localdata = props.data[0];\r\n      setdataState(props.data[0]);\r\n    }\r\n    const locallog = props.log; \r\n    setlogState(locallog);  \r\n  }, [props.data, props.log ]);\r\n\r\n  return (\r\n    <Form>\r\n      <Form.Group controlId=\"formPostRequestText\">\r\n        <Row>\r\n          <Form.Label column sm=\"2\">\r\n            Post request text : \r\n          </Form.Label>\r\n          <Col sm=\"10\">\r\n            <Form.Control type=\"email\" value= { JSON.stringify(data) } />\r\n          </Col>\r\n        </Row> { }<br/>\r\n        {log && <Row><Col sm=\"12\"><Alert variant={log['status']}>{log['message']}</Alert></Col></Row>}\r\n        <Row>\r\n          <Col md={{ span: 6, offset: 5 }}>\r\n            <Button \r\n              variant=\"success\"\r\n              onClick={ props.sendhandleClick }\r\n            >Generator & Send</Button> {}\r\n            <Button \r\n              variant=\"warning\"\r\n              onClick={ props.genertorhandleClick }\r\n            >Streaming</Button>\r\n          </Col>\r\n        </Row>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default CustomPost;\r\n","import React, { useState } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CustomTable from './table/Table'\r\nimport CustomChart from './chart/CustomChart'\r\nimport CustomPost from './post/Post'\r\n\r\nconst chatSocket = new WebSocket('ws://'+ window.location.host +'/ws/streaming/room_name/');\r\n\r\nfunction Ws() {\r\n\r\n  const [data, setdataState] = useState([]);\r\n  const [log, setlogState] = useState();\r\n\r\n  chatSocket.onmessage = function(e) {\r\n    if(data.length === ( 24 * 60 )){\r\n      setdataState([]);\r\n    }\r\n    const localdata = [JSON.parse(e.data),...data]\r\n    setdataState(localdata);\r\n  };\r\n\r\n  chatSocket.onclose = function(e) {\r\n    setlogState({\r\n        \"status\":\"danger\",\r\n        \"message\": \"socket closed unexpectedly\"\r\n    });\r\n  };\r\n\r\n  const sendhandleClick = () => {\r\n      setlogState({\r\n        \"status\":\"primary\",\r\n        \"message\": \"Sending Data to Backend...\"\r\n      });\r\n      chatSocket.send(JSON.stringify({\r\n        'reading': Math.random(),\r\n        'timestamp': Date.now(),\r\n        'sensorType': 'Temperature'\r\n      }));\r\n      setlogState({\r\n        \"status\":\"success\",\r\n        \"message\": \"Sent Data to Backend...\"\r\n      });\r\n  };\r\n\r\n  const genertorhandleClick = () => {\r\n    setInterval(sendhandleClick, 100);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"row\">\r\n        <div className=\"col-5\">\r\n          <CustomTable\r\n            data = {data}\r\n          />\r\n        </div>\r\n        <div className=\"col-7\">\r\n          <CustomChart\r\n            data = {data}\r\n          />\r\n        </div>\r\n      </div>\r\n      <hr/>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <CustomPost\r\n            data = { data }\r\n            log = { log }\r\n            sendhandleClick = { sendhandleClick }\r\n            genertorhandleClick = { genertorhandleClick }\r\n          />\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Ws;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CustomTable from './table/Table'\r\nimport CustomChart from './chart/CustomChart'\r\nimport CustomPost from './post/Post'\r\nimport axios from 'axios';\r\n\r\nconst url = 'collector/';\r\n\r\nfunction CustomHttp() {\r\n\r\n  const [data, setdataState] = useState([]);\r\n  const [log, setlogState] = useState();\r\n\r\n  useEffect(() => { \r\n    setInterval(longlooping, 500);\r\n     axios.get(url)\r\n    .then(function (response) {\r\n      const localdata = [response.data,...data];\r\n      setdataState(localdata);\r\n      setInterval(longlooping, 500);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  },[]);\r\n\r\n  const longlooping = () => {\r\n    axios.get(url)\r\n    .then(function (response) {\r\n      if(response.data['timestamp'] !== data['timestamp']){\r\n        const localdata = [response.data,...data];\r\n        setdataState(localdata);\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      setlogState({\r\n          \"status\":\"danger\",\r\n          \"message\": error\r\n      });\r\n    });\r\n  };\r\n\r\n  const sendhandleClick = () => {\r\n    setlogState({\r\n      \"status\":\"primary\",\r\n      \"message\": \"Sending Data to Backend...\"\r\n    });\r\n    axios.post(url + 'v1/iotdata/', {\r\n      'reading': Math.random(),\r\n      'timestamp': Date.now(),\r\n      'sensorType': 'Temperature'\r\n    })\r\n    .then(function (response) {\r\n      setlogState({\r\n        \"status\":\"success\",\r\n        \"message\": \"Sent Data to Backend...\"\r\n      });\r\n    })\r\n    .catch(function (error) {\r\n      setlogState({\r\n          \"status\":\"danger\",\r\n          \"message\": error\r\n      });\r\n    });\r\n  };\r\n\r\n  const genertorhandleClick = () => {\r\n    setInterval(sendhandleClick, 600);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"row\">\r\n        <div className=\"col-5\">\r\n          <CustomTable\r\n            data = {data}\r\n          />\r\n        </div>\r\n        <div className=\"col-7\">\r\n          <CustomChart\r\n            data = {data}\r\n          />\r\n        </div>\r\n      </div>\r\n      <hr/>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <CustomPost\r\n            data = { data }\r\n            log = { log }\r\n            sendhandleClick = { sendhandleClick }\r\n            genertorhandleClick = { genertorhandleClick }\r\n          />\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CustomHttp;\r\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CustomNav from './components/nav/Nav';\nimport Ws from './components/ws'\nimport CustomHttp from './components/http'\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <div>\n          <header>\n            <CustomNav/>\n          </header>\n          <Jumbotron>\n            <Switch>\n              <Route path=\"/ws\" component={Ws} />\n              <Route path=\"/\" component={CustomHttp} />\n            </Switch>\n          </Jumbotron>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}